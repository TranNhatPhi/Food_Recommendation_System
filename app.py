import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import time
import base64
from io import BytesIO

# Import modules
from data_generator import create_food_items, create_customers, create_ratings
from recommenders import ContentBasedRecommender, CollaborativeRecommender, HybridRecommender
from utils import (format_price, generate_food_card, get_popular_foods, get_customer_history,
                   get_cuisine_popularity, get_flavor_popularity, plot_ratings_distribution,
                   plot_cuisine_popularity)
from ui import load_css, setup_page_config, create_sidebar, create_header, create_footer, show_about_tab

# ƒê·∫∑t seed cho k·∫øt qu·∫£ nh·∫•t qu√°n
np.random.seed(42)
random.seed(42)


def show_recommendation_tab(sidebar_options, foods_df, ratings_df, content_rec, collab_rec, hybrid_rec):
    """Display content for the Recommendation tab"""
    if sidebar_options["recommend_button"]:
        st.markdown('<div class="divider"></div>', unsafe_allow_html=True)
        st.markdown(
            f'<h2 class="sub-header">M√≥n ƒÉn ƒë∆∞·ª£c g·ª£i √Ω cho kh√°ch h√†ng #{sidebar_options["selected_customer"]}</h2>',
            unsafe_allow_html=True)

        with st.spinner("ƒêang t·∫°o g·ª£i √Ω m√≥n ƒÉn cho b·∫°n..."):
            # L·∫•y g·ª£i √Ω d·ª±a tr√™n ph∆∞∆°ng ph√°p ƒë∆∞·ª£c ch·ªçn
            if sidebar_options["rec_type"] == "Content-Based (D·ª±a tr√™n n·ªôi dung)":
                # L·∫•y m√≥n ƒÉn kh√°ch h√†ng ƒë√£ ƒë√°nh gi√° cao nh·∫•t
                user_ratings = ratings_df[ratings_df['customer_id'] == sidebar_options["selected_customer"]]
                if len(user_ratings) > 0:
                    top_rated = user_ratings.sort_values('rating', ascending=False).head(1)
                    top_food_id = top_rated['food_id'].values[0]
                    recommendations = content_rec.recommend(top_food_id,
                                                            top_n=sidebar_options["num_recommendations"] * 3)
                else:
                    # N·∫øu kh√°ch h√†ng ch∆∞a c√≥ ƒë√°nh gi√° n√†o
                    popular_foods = get_popular_foods(ratings_df, foods_df,
                                                      top_n=sidebar_options["num_recommendations"])
                    recommendations = popular_foods

            elif sidebar_options["rec_type"] == "Collaborative (D·ª±a tr√™n c·ªông ƒë·ªìng)":
                if collab_rec is None:
                    # N·∫øu recommender ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
                    st.warning("Ch∆∞a kh·ªüi t·∫°o collaborative recommender. ƒêang hi·ªÉn th·ªã m√≥n ƒÉn ph·ªï bi·∫øn thay th·∫ø.")
                    recommendations = get_popular_foods(ratings_df, foods_df,
                                                        top_n=sidebar_options["num_recommendations"])
                else:
                    if collab_rec is None:
                        # N·∫øu recommender ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
                        st.warning("Ch∆∞a kh·ªüi t·∫°o collaborative recommender. ƒêang hi·ªÉn th·ªã m√≥n ƒÉn ph·ªï bi·∫øn thay th·∫ø.")
                        recommendations = get_popular_foods(ratings_df, foods_df,
                                                            top_n=sidebar_options["num_recommendations"])
                    else:
                        recommendations = collab_rec.recommend_for_customer(sidebar_options["selected_customer"],
                                                                            top_n=sidebar_options[
                                                                                      "num_recommendations"] * 3)
                        if recommendations.empty:
                            # N·∫øu kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu
                            popular_foods = get_popular_foods(ratings_df, foods_df,
                                                              top_n=sidebar_options["num_recommendations"])
                            recommendations = popular_foods

            else:  # Hybrid
                # L·∫•y m√≥n ƒÉn kh√°ch h√†ng ƒë√£ ƒë√°nh gi√° cao nh·∫•t
                user_ratings = ratings_df[ratings_df['customer_id'] == sidebar_options["selected_customer"]]
                if hybrid_rec is None:
                    # N·∫øu recommender ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
                    st.warning("Ch∆∞a kh·ªüi t·∫°o hybrid recommender. ƒêang hi·ªÉn th·ªã m√≥n ƒÉn ph·ªï bi·∫øn thay th·∫ø.")
                    recommendations = get_popular_foods(ratings_df, foods_df,
                                                        top_n=sidebar_options["num_recommendations"])
                else:
                    # S·ª≠ d·ª•ng m√≥n ƒÉn ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t (n·∫øu c√≥) nh∆∞ m·ªôt g·ª£i √Ω n·ªôi dung
                    food_id = None
                    if len(user_ratings) > 0:
                        top_rated = user_ratings.sort_values('rating', ascending=False).head(1)
                        food_id = top_rated['food_id'].values[0]

                    recommendations = hybrid_rec.recommend(
                        customer_id=sidebar_options["selected_customer"],
                        food_id=food_id,
                        top_n=sidebar_options["num_recommendations"] * 3
                    )

                    if recommendations.empty:
                        # N·∫øu kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu
                        popular_foods = get_popular_foods(ratings_df, foods_df,
                                                          top_n=sidebar_options["num_recommendations"])
                        recommendations = popular_foods

            # √Åp d·ª•ng b·ªô l·ªçc n·∫øu c√≥
            if sidebar_options["cuisine_filter"]:
                recommendations = recommendations[recommendations['cuisine'].isin(sidebar_options["cuisine_filter"])]

            if sidebar_options["price_range"]:
                recommendations = recommendations[(recommendations['price'] >= sidebar_options["price_range"][0]) &
                                                  (recommendations['price'] <= sidebar_options["price_range"][1])]

            if sidebar_options["flavors_filter"]:
                # L·ªçc m√≥n ƒÉn c√≥ ch·ª©a √≠t nh·∫•t m·ªôt trong c√°c h∆∞∆°ng v·ªã ƒë∆∞·ª£c ch·ªçn
                recommendations = recommendations[recommendations['flavors'].apply(
                    lambda x: any(flavor.strip() in sidebar_options["flavors_filter"] for flavor in x.split(',')))]

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if recommendations.empty:
                st.warning("Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn ph√π h·ª£p v·ªõi b·ªô l·ªçc. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√°c ƒëi·ªÅu ki·ªán kh√°c.")
            else:
                recommendations = recommendations.head(sidebar_options["num_recommendations"])

                # Hi·ªÉn th·ªã m√≥n ƒÉn d∆∞·ªõi d·∫°ng grid
                cols = st.columns(3)
                for i, (_, food) in enumerate(recommendations.iterrows()):
                    col_idx = i % 3

                    with cols[col_idx]:
                        if 'similarity_score' in food:
                            food_card = generate_food_card(food, "similarity", food['similarity_score'])
                        elif 'predicted_rating' in food:
                            food_card = generate_food_card(food, "predicted", food['predicted_rating'])
                        elif 'hybrid_score' in food:
                            food_card = generate_food_card(food, "hybrid", food['hybrid_score'])
                        else:
                            food_card = generate_food_card(food)

                        st.markdown(food_card, unsafe_allow_html=True)

    # Hi·ªÉn th·ªã m√≥n ƒÉn ph·ªï bi·∫øn n·∫øu kh√¥ng nh·∫•n n√∫t g·ª£i √Ω
    else:
        st.markdown('<h2 class="sub-header">M√≥n ƒÉn ph·ªï bi·∫øn</h2>', unsafe_allow_html=True)
        popular = get_popular_foods(ratings_df, foods_df, top_n=9)

        cols = st.columns(3)
        for i, (_, food) in enumerate(popular.iterrows()):
            col_idx = i % 3
            with cols[col_idx]:
                food_card = generate_food_card(food, "user", food['avg_rating'])
                st.markdown(food_card, unsafe_allow_html=True)


def show_analysis_tab(ratings_df, foods_df):
    """Display content for the Analysis tab"""
    st.markdown('<h2 class="sub-header">üìä Ph√¢n t√≠ch d·ªØ li·ªáu</h2>', unsafe_allow_html=True)

    # Ph√¢n t√≠ch theo lo·∫°i
    analysis_type = st.radio(
        "Ch·ªçn lo·∫°i ph√¢n t√≠ch:",
        ["Ph√¢n ph·ªëi ƒë√°nh gi√°", "·∫®m th·ª±c ph·ªï bi·∫øn", "H∆∞∆°ng v·ªã ph·ªï bi·∫øn", "Gi√° trung b√¨nh theo ·∫©m th·ª±c"],
        horizontal=True
    )

    if analysis_type == "Ph√¢n ph·ªëi ƒë√°nh gi√°":
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.plotly_chart(
            plot_ratings_distribution(ratings_df),
            use_container_width=True
        )
        st.markdown('</div>', unsafe_allow_html=True)

    elif analysis_type == "·∫®m th·ª±c ph·ªï bi·∫øn":
        st.markdown('<div class="card">', unsafe_allow_html=True)
        cuisine_data = get_cuisine_popularity(ratings_df, foods_df)
        st.plotly_chart(
            plot_cuisine_popularity(cuisine_data),
            use_container_width=True
        )
        st.markdown('</div>', unsafe_allow_html=True)

    elif analysis_type == "H∆∞∆°ng v·ªã ph·ªï bi·∫øn":
        st.markdown('<div class="card">', unsafe_allow_html=True)
        flavor_data = get_flavor_popularity(ratings_df, foods_df)

        fig = px.bar(
            flavor_data,
            x='flavor',
            y='avg_rating',
            text=flavor_data['avg_rating'].round(2),
            title='ƒê√°nh gi√° trung b√¨nh theo h∆∞∆°ng v·ªã',
            color='avg_rating',
            color_continuous_scale=px.colors.sequential.Purples,
            labels={'flavor': 'H∆∞∆°ng v·ªã', 'avg_rating': 'ƒêi·ªÉm trung b√¨nh'}
        )

        fig.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(title_font=dict(size=14)),
            yaxis=dict(title_font=dict(size=14), gridcolor='rgba(200,200,200,0.2)'),
        )

        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)

    else:  # Gi√° trung b√¨nh theo ·∫©m th·ª±c
        st.markdown('<div class="card">', unsafe_allow_html=True)
        cuisine_price = foods_df.groupby('cuisine')['price'].mean().reset_index()
        cuisine_price = cuisine_price.sort_values('price', ascending=False)

        fig = px.bar(
            cuisine_price,
            x='cuisine',
            y='price',
            text=cuisine_price['price'].apply(lambda x: f"{x / 1000:.1f}k"),
            title='Gi√° trung b√¨nh theo lo·∫°i ·∫©m th·ª±c',
            color='price',
            color_continuous_scale=px.colors.sequential.Greens,
            labels={'cuisine': '·∫®m th·ª±c', 'price': 'Gi√° trung b√¨nh (VND)'}
        )

        fig.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(title_font=dict(size=14)),
            yaxis=dict(title_font=dict(size=14), gridcolor='rgba(200,200,200,0.2)'),
        )

        st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)

    # S·ªë li·ªáu t·ªïng quan
    st.markdown('<h3 class="sub-header">S·ªë li·ªáu t·ªïng quan</h3>', unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("T·ªïng s·ªë m√≥n ƒÉn", f"{len(foods_df):,}")
        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("T·ªïng s·ªë kh√°ch h√†ng", f"{len(set(ratings_df['customer_id'])):,}")
        st.markdown('</div>', unsafe_allow_html=True)

    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("T·ªïng s·ªë ƒë√°nh gi√°", f"{len(ratings_df):,}")
        st.markdown('</div>', unsafe_allow_html=True)

    with col4:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        avg_rating = round(ratings_df['rating'].mean(), 2)
        st.metric("ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh", f"{avg_rating} ‚≠ê")
        st.markdown('</div>', unsafe_allow_html=True)


def show_customer_tab(sidebar_options, customers_df, ratings_df, foods_df):
    """Display content for the Customer tab"""
    selected_customer = sidebar_options["selected_customer"]

    st.markdown('<h2 class="sub-header">üë§ Th√¥ng tin kh√°ch h√†ng</h2>', unsafe_allow_html=True)

    # Th√¥ng tin c∆° b·∫£n v·ªÅ kh√°ch h√†ng
    if selected_customer in customers_df['customer_id'].values:
        customer_info = customers_df[customers_df['customer_id'] == selected_customer].iloc[0]

        st.markdown('<div class="card">', unsafe_allow_html=True)
        col1, col2 = st.columns(2)

        with col1:
            st.markdown(f"**ID Kh√°ch h√†ng:** {customer_info['customer_id']}")
            st.markdown(f"**Tu·ªïi:** {customer_info['age']}")
            st.markdown(f"**Gi·ªõi t√≠nh:** {customer_info['gender']}")

        with col2:
            st.markdown(f"**ƒê·ªô nh·∫°y c·∫£m v·ªÅ gi√°:** {customer_info['price_sensitivity']:.2f}/1.0")
            st.markdown(f"**·∫®m th·ª±c ∆∞a th√≠ch:** {customer_info['preferred_cuisines']}")
            st.markdown(f"**H∆∞∆°ng v·ªã ∆∞a th√≠ch:** {customer_info['preferred_flavors']}")
        st.markdown('</div>', unsafe_allow_html=True)

        # L·ªãch s·ª≠ ƒë√°nh gi√° c·ªßa kh√°ch h√†ng
        st.markdown('<h3 class="sub-header">L·ªãch s·ª≠ ƒë√°nh gi√°</h3>', unsafe_allow_html=True)

        history = get_customer_history(selected_customer, ratings_df, foods_df)
        if not history.empty:
            # T√≠nh to√°n m·ªôt s·ªë th·ªëng k√™
            avg_rating = history['rating'].mean()
            most_rated_cuisine = history.groupby('cuisine')['rating'].count().sort_values(ascending=False).index[0]
            highest_rated = history[history['rating'] == history['rating'].max()]

            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.metric("S·ªë l∆∞·ª£ng ƒë√°nh gi√°", f"{len(history)}")
                st.markdown('</div>', unsafe_allow_html=True)

            with col2:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.metric("ƒêi·ªÉm trung b√¨nh", f"{avg_rating:.2f} ‚≠ê")
                st.markdown('</div>', unsafe_allow_html=True)

            with col3:
                st.markdown('<div class="metric-card">', unsafe_allow_html=True)
                st.metric("·∫®m th·ª±c ƒë√°nh gi√° nhi·ªÅu nh·∫•t", most_rated_cuisine)
                st.markdown('</div>', unsafe_allow_html=True)

            # Hi·ªÉn th·ªã c√°c m√≥n ƒÉn ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t
            st.markdown('<h4 class="sub-header">M√≥n ƒÉn ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t</h4>', unsafe_allow_html=True)

            cols = st.columns(3)
            for i, (_, food) in enumerate(highest_rated.head(3).iterrows()):
                col_idx = i % 3
                with cols[col_idx]:
                    food_card = generate_food_card(food, "user", food['rating'])
                    st.markdown(food_card, unsafe_allow_html=True)

            # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi ƒë√°nh gi√° c·ªßa kh√°ch h√†ng
            st.markdown('<div class="card">', unsafe_allow_html=True)
            fig = px.histogram(
                history,
                x='rating',
                nbins=9,
                title=f'Ph√¢n ph·ªëi ƒë√°nh gi√° c·ªßa kh√°ch h√†ng #{selected_customer}',
                labels={'rating': 'ƒêi·ªÉm ƒë√°nh gi√°', 'count': 'S·ªë l∆∞·ª£ng'},
                color_discrete_sequence=['#7E57C2']
            )

            fig.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                xaxis=dict(tickvals=[1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]),
                yaxis=dict(gridcolor='rgba(200,200,200,0.2)'),
                bargap=0.1
            )

            st.plotly_chart(fig, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)

            # Danh s√°ch t·∫•t c·∫£ c√°c ƒë√°nh gi√°
            with st.expander("Xem t·∫•t c·∫£ ƒë√°nh gi√°"):
                st.dataframe(
                    history[['name', 'category', 'cuisine', 'price', 'rating', 'days_ago']].sort_values('rating',
                                                                                                        ascending=False),
                    use_container_width=True,
                    column_config={
                        'name': 'T√™n m√≥n ƒÉn',
                        'category': 'Lo·∫°i m√≥n',
                        'cuisine': '·∫®m th·ª±c',
                        'price': st.column_config.NumberColumn('Gi√°', format="%d VND"),
                        'rating': st.column_config.NumberColumn('ƒê√°nh gi√°', format="%.1f ‚≠ê"),
                        'days_ago': 'Ng√†y ƒë√°nh gi√° (ng√†y tr∆∞·ªõc)'
                    }
                )


def show_explore_section(foods_df):
    """Display the Explore New Foods section"""
    st.markdown('<div class="divider"></div>', unsafe_allow_html=True)
    st.markdown('<h2 class="sub-header">‚ú® Kh√°m ph√° m√≥n ƒÉn m·ªõi</h2>', unsafe_allow_html=True)

    explore_options = st.radio(
        "Ch·ªçn c√°ch kh√°m ph√°:",
        ["Ng·∫´u nhi√™n", "Theo gi√°", "Theo ·∫©m th·ª±c", "Theo h∆∞∆°ng v·ªã"],
        horizontal=True
    )

    col1, col2 = st.columns([3, 1])
    with col2:
        explore_button = st.button("‚ú® Kh√°m ph√° ngay", type="primary")

    if explore_button:
        with st.spinner("ƒêang t√¨m ki·∫øm m√≥n ƒÉn m·ªõi cho b·∫°n..."):
            if explore_options == "Ng·∫´u nhi√™n":
                discoveries = foods_df.sample(6)
            elif explore_options == "Theo gi√°":
                price_min = st.session_state.get('price_min', 0)
                price_max = st.session_state.get('price_max', 300000)
                discoveries = foods_df[(foods_df['price'] >= price_min) & (foods_df['price'] <= price_max)].sample(
                    min(6, len(foods_df)))
            elif explore_options == "Theo ·∫©m th·ª±c":
                selected_cuisine = st.session_state.get('selected_cuisine', random.choice(foods_df['cuisine'].unique()))
                discoveries = foods_df[foods_df['cuisine'] == selected_cuisine].sample(
                    min(6, len(foods_df[foods_df['cuisine'] == selected_cuisine])))
            else:  # Theo h∆∞∆°ng v·ªã
                # T·∫°o danh s√°ch h∆∞∆°ng v·ªã duy nh·∫•t
                all_flavors = list(set(
                    f.strip() for flavors in foods_df['flavors'] for f in flavors.split(',')
                ))

                # Ch·ªçn h∆∞∆°ng v·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥ trong session
                selected_flavor = st.session_state.get('selected_flavor', random.choice(all_flavors))
                discoveries = foods_df[foods_df['flavors'].str.contains(selected_flavor)].sample(
                    min(6, len(foods_df[foods_df['flavors'].str.contains(selected_flavor)])))

            st.markdown("<h3>M√≥n ƒÉn ƒë∆∞·ª£c kh√°m ph√°:</h3>", unsafe_allow_html=True)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng grid
            cols = st.columns(3)
            for i, (_, food) in enumerate(discoveries.iterrows()):
                col_idx = i % 3
                with cols[col_idx]:
                    food_card = generate_food_card(food)
                    st.markdown(food_card, unsafe_allow_html=True)

        # Thi·∫øt l·∫≠p t√πy ch·ªçn cho l·∫ßn kh√°m ph√° ti·∫øp theo
        if explore_options == "Theo gi√°":
            col1, col2 = st.columns(2)
            with col1:
                st.session_state.price_min = st.slider("Gi√° t·ªëi thi·ªÉu:", 0, 300000, step=10000)
            with col2:
                st.session_state.price_max = st.slider("Gi√° t·ªëi ƒëa:", 0, 300000, 300000, step=10000)
        elif explore_options == "Theo ·∫©m th·ª±c":
            st.session_state.selected_cuisine = st.selectbox(
                "Ch·ªçn ·∫©m th·ª±c:",
                sorted(foods_df['cuisine'].unique()),
                key=f"cuisine_selectbox_{explore_options}"
            )
        elif explore_options == "Theo h∆∞∆°ng v·ªã":
            # T·∫°o danh s√°ch h∆∞∆°ng v·ªã duy nh·∫•t
            all_flavors = set()
            for flavors_str in foods_df['flavors']:
                for flavor in flavors_str.split(','):
                    all_flavors.add(flavor.strip())

            st.session_state.selected_flavor = st.selectbox(
                "Ch·ªçn h∆∞∆°ng v·ªã:",
                sorted(list(all_flavors)),
                key=f"flavor_selectbox_{explore_options}"
            )


def main():
    """Main application function"""
    # Thi·∫øt l·∫≠p giao di·ªán
    setup_page_config()
    load_css()
    create_header()


import streamlit as st
import pandas as pd
from recommenders import ContentBasedRecommender, CollaborativeRecommender, HybridRecommender
from data_loader import load_foods_from_db, load_customers_from_db, load_ratings_from_db, get_customer_ratings, \
    add_rating, get_food_details
from db_utils import get_connection, close_connection
import visualizations as viz

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="H·ªá th·ªëng G·ª£i √Ω M√≥n ƒÉn Th√¥ng minh",
    page_icon="üç≤",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #FF5722;
        text-align: center;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .sub-header {
        font-size: 1.8rem;
        font-weight: bold;
        color: #FF9800;
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    .card {
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        background-color: #FFF8E1;
    }
    .metric-card {
        background-color: #E3F2FD;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }
    .food-card {
        background-color: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
        transition: transform 0.3s;
    }
    .food-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    .food-name {
        font-weight: bold;
        color: #E65100;
        font-size: 1.2rem;
    }
    .food-category {
        color: #7E57C2;
        font-size: 0.9rem;
    }
    .food-price {
        color: #00897B;
        font-weight: bold;
        font-size: 1.1rem;
    }
    .rating {
        color: #FFA000;
        font-weight: bold;
    }
    .highlight {
        background-color: #FFE0B2;
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-weight: bold;
    }
    .divider {
        height: 3px;
        background: linear-gradient(90deg, rgba(255,87,34,0.7) 0%, rgba(255,193,7,0.7) 100%);
        margin: 1rem 0;
        border-radius: 2px;
    }
    .footer {
        text-align: center;
        margin-top: 2rem;
        padding: 1rem;
        color: #78909C;
        font-size: 0.8rem;
    }
    .stButton>button {
        background-color: #FF5722;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
    }
    .stButton>button:hover {
        background-color: #E64A19;
    }
    .sidebar-content {
        padding: 1rem;
    }
    .tab-content {
        padding: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)


def format_price(price):
    """ƒê·ªãnh d·∫°ng gi√° ti·ªÅn"""
    return f"{price:,.0f}ƒë"


def generate_food_card(food, score_type=None, score=None):
    """T·∫°o card hi·ªÉn th·ªã m·ªôt m√≥n ƒÉn"""
    html = f"""
    <div class="food-card">
        <div class="food-name">{food['name']}</div>
        <div class="food-category">{food['category']} | {food['cuisine']}</div>
        <div>H∆∞∆°ng v·ªã: <span class="highlight">{food['flavors']}</span></div>
        <div>Nguy√™n li·ªáu: {food['ingredients']}</div>
        <div class="food-price">{format_price(food['price'])}</div>
    """

    if score_type and score:
        if score_type == "similarity":
            html += f'<div class="rating">ƒê·ªô t∆∞∆°ng t·ª±: {score:.2f}</div>'
        elif score_type == "predicted":
            html += f'<div class="rating">D·ª± ƒëo√°n: {score:.2f}/5 ‚≠ê</div>'
        elif score_type == "hybrid":
            html += f'<div class="rating">ƒêi·ªÉm g·ª£i √Ω: {score:.2f}/5 ‚≠ê</div>'
        elif score_type == "user":
            html += f'<div class="rating">ƒê√°nh gi√°: {score}/5 ‚≠ê</div>'

    html += "</div>"
    return html


def load_data():
    """T·∫£i d·ªØ li·ªáu t·ª´ database"""
    with st.spinner('ƒêang t·∫£i d·ªØ li·ªáu...'):
        foods_df = load_foods_from_db()
        customers_df = load_customers_from_db()
        ratings_df = load_ratings_from_db()

        # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu
        if foods_df.empty or customers_df.empty or ratings_df.empty:
            st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi database ho·∫∑c d·ªØ li·ªáu tr·ªëng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi.")
            st.stop()

        return foods_df, customers_df, ratings_df


def initialize_recommenders(foods_df, ratings_df, customers_df):
    """Kh·ªüi t·∫°o c√°c recommender"""
    if 'recommenders_initialized' not in st.session_state:
        with st.spinner('ƒêang hu·∫•n luy·ªán m√¥ h√¨nh g·ª£i √Ω...'):
            # Kh·ªüi t·∫°o recommenders
            content_recommender = ContentBasedRecommender()
            collab_recommender = CollaborativeRecommender()
            hybrid_recommender = HybridRecommender()

            # Hu·∫•n luy·ªán c√°c m√¥ h√¨nh
            content_recommender.fit(foods_df)
            collab_recommender.fit(ratings_df, foods_df)
            hybrid_recommender.fit(foods_df, ratings_df, customers_df)

            # L∆∞u c√°c recommender v√†o session_state
            st.session_state.content_recommender = content_recommender
            st.session_state.collab_recommender = collab_recommender
            st.session_state.hybrid_recommender = hybrid_recommender
            st.session_state.recommenders_initialized = True


def main():
    st.title("üç≤ H·ªá th·ªëng G·ª£i √Ω M√≥n ƒÉn Th√¥ng minh")

    # Kh·ªüi t·∫°o recommenders trong session state n·∫øu ch∆∞a c√≥
    if "content_recommender" not in st.session_state:
        st.session_state.content_recommender = None
    if "collab_recommender" not in st.session_state:
        st.session_state.collab_recommender = None
    if "hybrid_recommender" not in st.session_state:
        st.session_state.hybrid_recommender = None

    # T·∫£i d·ªØ li·ªáu
    foods_df, customers_df, ratings_df = load_data()

    # Kh·ªüi t·∫°o c√°c recommender
    initialize_recommenders(foods_df, ratings_df, customers_df)

    # Sidebar: Ch·ªçn kh√°ch h√†ng v√† ch·ª©c nƒÉng
    st.sidebar.title("T√πy ch·ªçn")

    # Ch·ªçn kh√°ch h√†ng
    customer_id = st.sidebar.selectbox(
        "Ch·ªçn kh√°ch h√†ng:",
        options=customers_df['customer_id'].tolist(),
        format_func=lambda x: f"{x} - {customers_df[customers_df['customer_id'] == x]['name'].values[0]}"
    )

    # Hi·ªÉn th·ªã th√¥ng tin kh√°ch h√†ng
    customer_info = customers_df[customers_df['customer_id'] == customer_id].iloc[0]
    st.sidebar.write(f"**T√™n:** {customer_info['name']}")
    st.sidebar.write(f"**Tu·ªïi:** {customer_info['age']}")
    st.sidebar.write(f"**Gi·ªõi t√≠nh:** {customer_info['gender']}")

    # Ch·ªçn ch·ª©c nƒÉng
    menu = st.sidebar.radio(
        "Ch·ªçn ch·ª©c nƒÉng:",
        options=["G·ª£i √Ω m√≥n ƒÉn", "T√¨m ki·∫øm m√≥n ƒÉn", "ƒê√°nh gi√° m√≥n ƒÉn", "Ph√¢n t√≠ch d·ªØ li·ªáu"]
    )

    # Hi·ªÉn th·ªã ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng
    if menu == "G·ª£i √Ω m√≥n ƒÉn":
        show_recommendations(customer_id, foods_df, ratings_df, customers_df)
    elif menu == "T√¨m ki·∫øm m√≥n ƒÉn":
        search_foods(foods_df)
    elif menu == "ƒê√°nh gi√° m√≥n ƒÉn":
        rate_foods(customer_id, foods_df, ratings_df)
    elif menu == "Ph√¢n t√≠ch d·ªØ li·ªáu":
        analyze_data(foods_df, ratings_df)

    # ƒê·∫£m b·∫£o ƒë√≥ng k·∫øt n·ªëi khi app k·∫øt th√∫c
    st.sidebar.markdown("---")
    if st.sidebar.button("ƒê√≥ng k·∫øt n·ªëi Database"):
        close_connection()
        st.sidebar.success("ƒê√£ ƒë√≥ng k·∫øt n·ªëi Database")


def show_recommendations(customer_id, foods_df, ratings_df, customers_df):
    st.header("G·ª£i √Ω m√≥n ƒÉn")

    # Ch·ªçn ph∆∞∆°ng ph√°p g·ª£i √Ω
    recommendation_type = st.radio(
        "Ch·ªçn ph∆∞∆°ng ph√°p g·ª£i √Ω:",
        options=["D·ª±a tr√™n c·ªông ƒë·ªìng", "D·ª±a tr√™n n·ªôi dung", "K·∫øt h·ª£p"]
    )

    # Hi·ªÉn th·ªã c√°c t√πy ch·ªçn d·ª±a tr√™n ph∆∞∆°ng ph√°p ƒë∆∞·ª£c ch·ªçn
    if recommendation_type == "D·ª±a tr√™n c·ªông ƒë·ªìng":
        st.subheader("G·ª£i √Ω d·ª±a tr√™n c·ªông ƒë·ªìng")
        st.write("H·ªá th·ªëng s·∫Ω g·ª£i √Ω m√≥n ƒÉn d·ª±a tr√™n ƒë√°nh gi√° c·ªßa nh·ªØng kh√°ch h√†ng c√≥ s·ªü th√≠ch t∆∞∆°ng t·ª± b·∫°n.")

        # Tr√≠ch xu·∫•t recommender t·ª´ session state
        collab_recommender = st.session_state.collab_recommender

        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng g·ª£i √Ω mu·ªën nh·∫≠n
        num_recommendations = st.slider(
            "S·ªë l∆∞·ª£ng g·ª£i √Ω:",
            min_value=5,
            max_value=20,
            value=10,
            step=5
        )

        # Th√™m b·ªô l·ªçc t√πy ch·ªçn
        with st.expander("B·ªô l·ªçc t√πy ch·ªçn"):
            # L·ªçc theo ·∫©m th·ª±c
            cuisine_options = sorted(foods_df['cuisine'].unique())
            cuisine_filter = st.multiselect(
                "L·ªçc theo ·∫©m th·ª±c:",
                options=cuisine_options,
                key="collab_cuisine_filter"
            )

            # L·ªçc theo kho·∫£ng gi√°
            min_price = int(foods_df['price'].min())
            max_price = int(foods_df['price'].max())
            price_range = st.slider(
                "Kho·∫£ng gi√°:",
                min_value=min_price,
                max_value=max_price,
                value=(min_price, max_price),
                step=10000,
                key="collab_price_range"
            )

        # L·∫•y g·ª£i √Ω d·ª±a tr√™n collaborative filtering
        with st.spinner("ƒêang t·∫°o g·ª£i √Ω m√≥n ƒÉn d·ª±a tr√™n c·ªông ƒë·ªìng..."):
            # L·∫•y nhi·ªÅu g·ª£i √Ω h∆°n ƒë·ªÉ c√≥ th·ªÉ √°p d·ª•ng b·ªô l·ªçc
            recommendations = collab_recommender.recommend_for_customer(customer_id, top_n=num_recommendations * 3)

            # √Åp d·ª•ng b·ªô l·ªçc n·∫øu c√≥
            if cuisine_filter:
                recommendations = recommendations[recommendations['cuisine'].isin(cuisine_filter)]

            if price_range != (min_price, max_price):
                recommendations = recommendations[(recommendations['price'] >= price_range[0]) &
                                                  (recommendations['price'] <= price_range[1])]

            # C·∫Øt l·∫°i danh s√°ch k·∫øt qu·∫£ theo s·ªë l∆∞·ª£ng y√™u c·∫ßu
            recommendations = recommendations.head(num_recommendations)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if not recommendations.empty:
                st.write(
                    f"### Top {len(recommendations)} m√≥n ƒÉn ƒë∆∞·ª£c g·ª£i √Ω cho {customers_df[customers_df['customer_id'] == customer_id]['name'].values[0]}")

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng grid
                cols = st.columns(3)
                for i, (idx, row) in enumerate(recommendations.iterrows()):
                    food = row.to_dict()
                    score = row['predicted_rating']
                    with cols[i % 3]:
                        st.markdown(generate_food_card(food, "predicted", score), unsafe_allow_html=True)
            else:
                st.info("Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ g·ª£i √Ω m√≥n ƒÉn. Vui l√≤ng ƒë√°nh gi√° th√™m m√≥n ƒÉn.")

                # T√≠nh ƒë·ªô ph·ªï bi·∫øn d·ª±a tr√™n s·ªë l∆∞·ª£t ƒë√°nh gi√°
                popularity_df = ratings_df.groupby('food_id').size().reset_index(name='popularity')

                # G·ªôp v√†o b·∫£ng foods_df
                foods_df = foods_df.merge(popularity_df, on='food_id', how='left')
                foods_df['popularity'] = foods_df['popularity'].fillna(0).astype(int)

                # cols = st.columns(3)
                # for i, (idx, food) in enumerate(popularity_df.iterrows()):
                #     with cols[i % 3]:
                #         st.markdown(generate_food_card(food.to_dict()), unsafe_allow_html=True)

    elif recommendation_type == "D·ª±a tr√™n n·ªôi dung":
        st.subheader("G·ª£i √Ω d·ª±a tr√™n n·ªôi dung")
        st.write("Ch·ªçn m·ªôt m√≥n ƒÉn y√™u th√≠ch ƒë·ªÉ t√¨m c√°c m√≥n t∆∞∆°ng t·ª±:")

        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng g·ª£i √Ω mu·ªën nh·∫≠n
        num_recommendations = st.slider(
            "S·ªë l∆∞·ª£ng g·ª£i √Ω:",
            min_value=5,
            max_value=20,
            value=10,
            step=5
        )

        # Tr√≠ch xu·∫•t recommender t·ª´ session state
        content_recommender = st.session_state.content_recommender

        # T·∫°o danh s√°ch m√≥n ƒÉn ƒë√£ ƒë√°nh gi√° b·ªüi kh√°ch h√†ng
        rated_foods = ratings_df[ratings_df['customer_id'] == customer_id]

        if not rated_foods.empty:
            # L·∫•y danh s√°ch m√≥n ƒÉn ƒë√£ ƒë√°nh gi√° cao
            highly_rated = rated_foods[rated_foods['rating'] >= 4]

            if not highly_rated.empty:
                selected_food = st.selectbox(
                    "Ch·ªçn m√≥n ƒÉn y√™u th√≠ch:",
                    options=highly_rated['food_id'].tolist(),
                    format_func=lambda
                        x: f"{foods_df[foods_df['food_id'] == x]['name'].values[0]} (ƒê√°nh gi√°: {rated_foods[rated_foods['food_id'] == x]['rating'].values[0]}/5)"
                )

                # L·∫•y g·ª£i √Ω d·ª±a tr√™n n·ªôi dung
                recommendations = content_recommender.recommend(selected_food, top_n=10)

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                if not recommendations.empty:
                    st.write(
                        f"### C√°c m√≥n ƒÉn t∆∞∆°ng t·ª± v·ªõi {foods_df[foods_df['food_id'] == selected_food]['name'].values[0]}")

                    for idx, row in recommendations.iterrows():
                        food = row.to_dict()
                        score = row['similarity_score']
                        st.markdown(generate_food_card(food, "similarity", score), unsafe_allow_html=True)
            else:
                st.info(
                    "B·∫°n ch∆∞a ƒë√°nh gi√° cao m√≥n ƒÉn n√†o. H√£y ƒë√°nh gi√° c√°c m√≥n ƒÉn v·ªõi 4 sao tr·ªü l√™n ƒë·ªÉ nh·∫≠n g·ª£i √Ω t·ªët h∆°n.")
        else:
            st.info("B·∫°n ch∆∞a ƒë√°nh gi√° m√≥n ƒÉn n√†o. H√£y ƒë√°nh gi√° m·ªôt s·ªë m√≥n ƒÉn ƒë·ªÉ nh·∫≠n g·ª£i √Ω t·ªët h∆°n.")

        # T√πy ch·ªçn t√¨m ki·∫øm d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm
        st.write("### Ho·∫∑c nh·∫≠p ƒë·∫∑c ƒëi·ªÉm m√≥n ƒÉn b·∫°n mu·ªën")
        features = st.text_area("Nh·∫≠p c√°c ƒë·∫∑c ƒëi·ªÉm (v√≠ d·ª•: cay, ng·ªçt, h·∫£i s·∫£n, √ù, n∆∞·ªõng...):",
                                "cay ng·ªçt h·∫£i s·∫£n",
                                key="main_features_text_area")

        if st.button("T√¨m ki·∫øm"):
            recommendations = content_recommender.get_similar_by_features(features, top_n=10)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if not recommendations.empty:
                st.write(f"### C√°c m√≥n ƒÉn ph√π h·ª£p v·ªõi ƒë·∫∑c ƒëi·ªÉm: '{features}'")

                for idx, row in recommendations.iterrows():
                    food = row.to_dict()
                    score = row['similarity_score']
                    st.markdown(generate_food_card(food, "similarity", score), unsafe_allow_html=True)

    elif recommendation_type == "K·∫øt h·ª£p":
        st.subheader("G·ª£i √Ω k·∫øt h·ª£p")
        st.write("H·ªá th·ªëng s·∫Ω k·∫øt h·ª£p nhi·ªÅu ph∆∞∆°ng ph√°p ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω t·ªët nh·∫•t.")

        # Tr√≠ch xu·∫•t recommender t·ª´ session state
        hybrid_recommender = st.session_state.hybrid_recommender

        # T√πy ch·ªçn t√πy ch·ªânh
        col1, col2 = st.columns(2)

        with col1:
            food_id = None
            # T·∫°o danh s√°ch m√≥n ƒÉn ƒë√£ ƒë√°nh gi√° b·ªüi kh√°ch h√†ng
            rated_foods = ratings_df[ratings_df['customer_id'] == customer_id]

            if not rated_foods.empty:
                st.write("Ch·ªçn m√≥n ƒÉn y√™u th√≠ch (kh√¥ng b·∫Øt bu·ªôc):")
                include_favorite = st.checkbox("Bao g·ªìm m√≥n ƒÉn y√™u th√≠ch")

                if include_favorite:
                    # L·∫•y danh s√°ch m√≥n ƒÉn ƒë√£ ƒë√°nh gi√° cao
                    highly_rated = rated_foods[rated_foods['rating'] >= 4]

                    if not highly_rated.empty:
                        food_id = st.selectbox(
                            "Ch·ªçn m√≥n ƒÉn y√™u th√≠ch:",
                            options=highly_rated['food_id'].tolist(),
                            format_func=lambda
                                x: f"{foods_df[foods_df['food_id'] == x]['name'].values[0]} (ƒê√°nh gi√°: {rated_foods[rated_foods['food_id'] == x]['rating'].values[0]}/5)"
                        )

        with col2:
            st.write("T√πy ch·ªçn ƒë·∫∑c ƒëi·ªÉm (kh√¥ng b·∫Øt bu·ªôc):")
            include_features = st.checkbox("Bao g·ªìm ƒë·∫∑c ƒëi·ªÉm")

            features = None
            if include_features:
                features = st.text_area("Nh·∫≠p c√°c ƒë·∫∑c ƒëi·ªÉm:", "cay ng·ªçt h·∫£i s·∫£n")

        if st.button("Nh·∫≠n g·ª£i √Ω"):
            # L·∫•y g·ª£i √Ω k·∫øt h·ª£p
            recommendations = hybrid_recommender.recommend(
                customer_id=customer_id,
                food_id=food_id,
                features=features,
                top_n=10
            )

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if not recommendations.empty:
                st.write(
                    f"### Top 10 m√≥n ƒÉn ƒë∆∞·ª£c g·ª£i √Ω cho {customers_df[customers_df['customer_id'] == customer_id]['name'].values[0]}")

                for idx, row in recommendations.iterrows():
                    food = row.to_dict()
                    score = row['hybrid_score']
                    st.markdown(generate_food_card(food, "hybrid", score), unsafe_allow_html=True)
            else:
                st.info("Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ g·ª£i √Ω m√≥n ƒÉn. Vui l√≤ng ƒë√°nh gi√° th√™m m√≥n ƒÉn.")


def search_foods(foods_df):
    st.header("T√¨m ki·∫øm m√≥n ƒÉn")

    # C√°c b·ªô l·ªçc
    col1, col2, col3 = st.columns(3)

    with col1:
        category_filter = st.multiselect(
            "Lo·∫°i m√≥n:",
            options=sorted(foods_df['category'].unique()),
            key="category_filter_select"
        )

    with col2:
        cuisine_filter = st.multiselect(
            "·∫®m th·ª±c:",
            options=sorted(foods_df['cuisine'].unique()),
            key="cuisine_filter_select"
        )

    with col3:
        price_range = st.slider(
            "Kho·∫£ng gi√°:",
            min_value=float(foods_df['price'].min()),
            max_value=float(foods_df['price'].max()),
            value=(float(foods_df['price'].min()), float(foods_df['price'].max())),
            step=10000.0,
            key="price_range_slider"
        )

    # T√¨m ki·∫øm theo t·ª´ kh√≥a
    search_term = st.text_input("T√¨m ki·∫øm:", "")

    # L·ªçc d·ªØ li·ªáu
    filtered_df = foods_df.copy()

    if category_filter:
        filtered_df = filtered_df[filtered_df['category'].isin(category_filter)]

    if cuisine_filter:
        filtered_df = filtered_df[filtered_df['cuisine'].isin(cuisine_filter)]

    filtered_df = filtered_df[(filtered_df['price'] >= price_range[0]) & (filtered_df['price'] <= price_range[1])]

    if search_term:
        # T√¨m ki·∫øm trong nhi·ªÅu c·ªôt
        filtered_df = filtered_df[
            filtered_df['name'].str.contains(search_term, case=False) |
            filtered_df['ingredients'].str.contains(search_term, case=False) |
            filtered_df['flavors'].str.contains(search_term, case=False) |
            filtered_df['features'].str.contains(search_term, case=False)
            ]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.write(f"T√¨m th·∫•y {len(filtered_df)} m√≥n ƒÉn")

    # S·∫Øp x·∫øp
    sort_option = st.selectbox(
        "S·∫Øp x·∫øp theo:",
        options=["T√™n (A-Z)", "T√™n (Z-A)", "Gi√° (Th·∫•p-Cao)", "Gi√° (Cao-Th·∫•p)"]
    )

    if sort_option == "T√™n (A-Z)":
        filtered_df = filtered_df.sort_values('name', ascending=True)
    elif sort_option == "T√™n (Z-A)":
        filtered_df = filtered_df.sort_values('name', ascending=False)
    elif sort_option == "Gi√° (Th·∫•p-Cao)":
        filtered_df = filtered_df.sort_values('price', ascending=True)
    elif sort_option == "Gi√° (Cao-Th·∫•p)":
        filtered_df = filtered_df.sort_values('price', ascending=False)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng card
    for idx, row in filtered_df.iterrows():
        food = row.to_dict()
        st.markdown(generate_food_card(food), unsafe_allow_html=True)


def rate_foods(customer_id, foods_df, ratings_df):
    st.header("ƒê√°nh gi√° m√≥n ƒÉn")

    # Tab ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi·ªØa 2 ch·∫ø ƒë·ªô
    tab1, tab2 = st.tabs(["ƒê√°nh gi√° m√≥n ƒÉn m·ªõi", "L·ªãch s·ª≠ ƒë√°nh gi√°"])

    with tab1:
        # Danh s√°ch m√≥n ƒÉn ch∆∞a ƒë√°nh gi√°
        rated_foods = ratings_df[ratings_df['customer_id'] == customer_id]['food_id'].unique()
        unrated_foods = foods_df[~foods_df['food_id'].isin(rated_foods)]

        if not unrated_foods.empty:
            st.write(f"C√≤n {len(unrated_foods)} m√≥n ƒÉn b·∫°n ch∆∞a ƒë√°nh gi√°")

            # Ch·ªçn m√≥n ƒÉn ƒë·ªÉ ƒë√°nh gi√°
            selected_food = st.selectbox(
                "Ch·ªçn m√≥n ƒÉn ƒë·ªÉ ƒë√°nh gi√°:",
                options=unrated_foods['food_id'].tolist(),
                format_func=lambda x: f"{foods_df[foods_df['food_id'] == x]['name'].values[0]}"
            )

            # Hi·ªÉn th·ªã th√¥ng tin m√≥n ƒÉn
            food_info = foods_df[foods_df['food_id'] == selected_food].iloc[0].to_dict()
            st.markdown(generate_food_card(food_info), unsafe_allow_html=True)

            # ƒê√°nh gi√°
            rating = st.slider("ƒê√°nh gi√° c·ªßa b·∫°n:", 1, 5, 3)

            if st.button("G·ª≠i ƒë√°nh gi√°"):
                # Th√™m ƒë√°nh gi√° v√†o database
                success = add_rating(customer_id, selected_food, rating)

                if success:
                    st.success(f"ƒê√£ ƒë√°nh gi√° m√≥n {food_info['name']} v·ªõi {rating} sao!")
                    # C·∫≠p nh·∫≠t l·∫°i ratings_df
                    # st.experimental_rerun()
                    st.rerun()
                else:
                    st.error("Kh√¥ng th·ªÉ th√™m ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.")
        else:
            st.info("B·∫°n ƒë√£ ƒë√°nh gi√° t·∫•t c·∫£ c√°c m√≥n ƒÉn. Th·∫≠t tuy·ªát!")

    with tab2:
        # L·∫•y l·ªãch s·ª≠ ƒë√°nh gi√° t·ª´ database
        user_ratings = get_customer_ratings(customer_id)

        if not user_ratings.empty:
            st.write(f"B·∫°n ƒë√£ ƒë√°nh gi√° {len(user_ratings)} m√≥n ƒÉn")

            # Hi·ªÉn th·ªã l·ªãch s·ª≠ ƒë√°nh gi√°
            for idx, row in user_ratings.iterrows():
                food = {
                    'name': row['food_name'],
                    'category': row['category'],
                    'cuisine': row['cuisine'],
                    'price': row['price'],
                    'ingredients': foods_df[foods_df['food_id'] == row['food_id']]['ingredients'].values[0],
                    'flavors': foods_df[foods_df['food_id'] == row['food_id']]['flavors'].values[0]
                }
                st.markdown(generate_food_card(food, "user", row['rating']), unsafe_allow_html=True)
        else:
            st.info("B·∫°n ch∆∞a ƒë√°nh gi√° m√≥n ƒÉn n√†o. H√£y ƒë√°nh gi√° m·ªôt s·ªë m√≥n ƒÉn ƒë·ªÉ nh·∫≠n g·ª£i √Ω t·ªët h∆°n.")


def analyze_data(foods_df, ratings_df):
    st.header("Ph√¢n t√≠ch d·ªØ li·ªáu")

    # Ch·ªçn lo·∫°i ph√¢n t√≠ch
    analysis_type = st.selectbox(
        "Ch·ªçn lo·∫°i ph√¢n t√≠ch:",
        options=["Ph√¢n ph·ªëi ƒë√°nh gi√°", "·∫®m th·ª±c ph·ªï bi·∫øn", "H∆∞∆°ng v·ªã ph·ªï bi·∫øn", "Gi√° trung b√¨nh theo ·∫©m th·ª±c"],
        key="analysis_type_select"
    )

    # Hi·ªÉn th·ªã ph√¢n t√≠ch t∆∞∆°ng ·ª©ng
    if analysis_type == "Ph√¢n ph·ªëi ƒë√°nh gi√°":
        st.subheader("Ph√¢n ph·ªëi ƒë√°nh gi√°")

        # T·∫°o bi·ªÉu ƒë·ªì ph√¢n ph·ªëi ƒë√°nh gi√°
        fig = viz.plot_rating_distribution(ratings_df)
        st.plotly_chart(fig, use_container_width=True)

    elif analysis_type == "·∫®m th·ª±c ph·ªï bi·∫øn":
        st.subheader("·∫®m th·ª±c ph·ªï bi·∫øn")

        # T·∫°o bi·ªÉu ƒë·ªì ·∫©m th·ª±c ph·ªï bi·∫øn
        fig = viz.plot_popular_cuisines(foods_df, ratings_df)
        st.plotly_chart(fig, use_container_width=True)

    elif analysis_type == "H∆∞∆°ng v·ªã ph·ªï bi·∫øn":
        st.subheader("H∆∞∆°ng v·ªã ph·ªï bi·∫øn")

        # T·∫°o bi·ªÉu ƒë·ªì h∆∞∆°ng v·ªã ph·ªï bi·∫øn
        fig = viz.plot_popular_flavors(foods_df)
        st.plotly_chart(fig, use_container_width=True)

    elif analysis_type == "Gi√° trung b√¨nh theo ·∫©m th·ª±c":
        st.subheader("Gi√° trung b√¨nh theo ·∫©m th·ª±c")

        # T·∫°o bi·ªÉu ƒë·ªì gi√° trung b√¨nh theo ·∫©m th·ª±c
        fig = viz.plot_avg_price_by_cuisine(foods_df)
        st.plotly_chart(fig, use_container_width=True)


if __name__ == "__main__":
    main()
    # T·∫°o ho·∫∑c l·∫•y d·ªØ li·ªáu t·ª´ session state
    if 'foods_df' not in st.session_state:
        with st.spinner("ƒêang t·∫°o d·ªØ li·ªáu m√≥n ƒÉn..."):
            foods_df = create_food_items(num_items=100)
            customers_df = create_customers(num_customers=500)
            ratings_df = create_ratings(customers_df, foods_df, sparsity=0.05)

            # L∆∞u v√†o session state
            st.session_state.foods_df = foods_df
            st.session_state.customers_df = customers_df
            st.session_state.ratings_df = ratings_df

            # Kh·ªüi t·∫°o recommenders
            content_rec = ContentBasedRecommender()
            content_rec.fit(foods_df)

            collab_rec = CollaborativeRecommender()
            collab_rec.fit(ratings_df, foods_df)

            hybrid_rec = HybridRecommender()
            hybrid_rec.fit(foods_df, ratings_df, customers_df)

            st.session_state.content_rec = content_rec
            st.session_state.collab_rec = collab_rec
            st.session_state.hybrid_rec = hybrid_rec
    else:
        # L·∫•y t·ª´ session state
        foods_df = st.session_state.foods_df
        customers_df = st.session_state.customers_df
        ratings_df = st.session_state.ratings_df
        content_rec = st.session_state.content_rec
        collab_rec = st.session_state.collab_rec
        hybrid_rec = st.session_state.hybrid_rec

    # T·∫°o sidebar
    sidebar_options = create_sidebar(ratings_df, foods_df)

    # Tab ch√≠nh c·ªßa ·ª©ng d·ª•ng
    tabs = st.tabs(["üçΩÔ∏è G·ª£i √Ω m√≥n ƒÉn", "üìä Ph√¢n t√≠ch", "üë§ Kh√°ch h√†ng", "‚ÑπÔ∏è Gi·ªõi thi·ªáu"])

    # Tab 1: G·ª£i √Ω m√≥n ƒÉn
    with tabs[0]:
        show_recommendation_tab(sidebar_options, foods_df, ratings_df, content_rec, collab_rec, hybrid_rec)

        show_explore_section(foods_df)

    # Tab 2: Ph√¢n t√≠ch
    with tabs[1]:
        show_analysis_tab(ratings_df, foods_df)

    # Tab 3: Kh√°ch h√†ng
    with tabs[2]:
        show_customer_tab(sidebar_options, customers_df, ratings_df, foods_df)

    # Tab 4: Gi·ªõi thi·ªáu
    with tabs[3]:
        show_about_tab()

    # Footer
    create_footer()